#!/usr/bin/env node

/**
  * Simple Command-Line Wrapper for the main Pitchfork Module (../index.js)
  */

var request = require('superagent')
  , exec = require('child_process').exec
  , q = require('q')
  , async = require('async')
  , _ = require('lodash')
  , prettyjson = require('prettyjson')
  , Pitchfork = require('../index')
  , argv = require('minimist')(process.argv.slice(2));

// global constants
var USAGE = "usage: pitchfork [-hjTvVp] [-tx, --text] -a ARTIST_NAME -t ALBUM_TITLE";
var VERSION = require("../package").version;

function parse_args(args){

  var artist = args['a'];
  var album = args['t'];

  // if there's a page num
  var pageNum = args['p'];

  return {
    artist: artist,
    album: album,
    json: args["j"] || args["json"] || false,
    verbose: args["v"] || args["verbose"] || false,
    version: args["V"] || args["version"] || false,
    truncated: args["T"] || args["truncated"] || false,
    justText: args["tx"] || args["text"] || false,
    pageNum: pageNum || false,
  };
}



void function main(origArgs) {

  // variables;
  var opts = parse_args(origArgs);
  var artist = opts.artist || null;
  var album = opts.album || null;
  var json = opts.json || false;
  var verbose = opts.verbose || false;
  var version = opts.version || false;
  var truncated = opts.truncated || false;
  var justText = opts.justText;
  var pageNum = opts.pageNum || false;

  // if in "help mode"
  if (origArgs["h"]) {
    // display usage
    console.log(USAGE);

  } else if (version) {
    console.log(VERSION);

  // if there's a page num
  } else if (pageNum) {
    search = new Pitchfork.Page(pageNum);
    search.promise.then(function () {
      if (search.results.length === 0) {
        console.log("Your search returned no results!  Please try a differnt query.");
        return;
      }
      var review = search.results[0];
      review.promise.then(function(){
        var output
          , printer;
        
        if (json) { printer = JSON.stringify; }
        if (truncated) { output = review.truncated(); }

        if (justText) {
          output = review.text_pretty_print();
          printer = function (o) { return o; };
        }
        
        output = output || review.attributes;
        printer = printer || prettyjson.render;

        var reviews = [];
        search.results.forEach(function (result) {
          var review;
          if (verbose) { review = result.verbose(); }
          else { review = result.truncated() }
          reviews.push(review);
        });
        // print a list of reviews
        console.log(printer(reviews));

      });
    })

  // if there's an artist and/or album
  } else if (artist || album) {
     
    search = new Pitchfork.Search(artist, album);
    search.promise.then(function () {
        if (search.results.length === 0) {
          console.log("Your search returned no results!  Please try a differnt query.");
          return;
        }
        var reviewPromises = search.results.map(function(a) { return a.promise });
        q.all(reviewPromises).then(function(reviews){
          reviews.forEach(function (r) {
            var output
              , printer;
            if (verbose) { output = r.verbose(); }
            if (json) { printer = JSON.stringify; }
            if (truncated) { output = r.truncated(); }

            if (justText) {
              output = r.text_pretty_print();
              printer = function (o) { return o; };
            }
            
            output = output || r.attributes;
            printer = printer || prettyjson.render;
            // if no album was specified...
            if (!album) {
              // print a list of reviews
              console.log(printer({ 
                title: r.attributes.title, 
                url: r.attributes.url
              }), '\n');
            } else { console.log(printer(output)); }
          });
        });
      });
  }
}(argv);
